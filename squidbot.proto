syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.adventuresquad.squidbot.protocols";
option java_outer_classname = "SquidbotProto";

package protocols;

service Brain {
  // First call that a frontend must make to the brain to ensure that it
  // supports the correct version of the brain and also ensure the brain is up.
  rpc FrontendStarted(FrontendRequest) returns (FrontendResponse) {}

  // Posts a message from a frontend
  rpc OnNewMessage(MessageRequest) returns (MessageResponse) {}
}

message FrontendRequest {
  // The version number of the frontend making the start request.
  string frontend_version = 1;

  // The name of the frontend making the start request.
  string frontend_name = 2;
}

message FrontendResponse {
  // The version of the brain server the frontend is speaking to.
  string brain_version = 1;
}

// A message coming in from a frontend driver containing the sender's handle
message MessageRequest {
  // Used to help coordinate requests to replies.
  int64 unique_id = 1;

  // Timestamp of the message as specified by the upstream service -- not the
  // frontend driver for squidbot.
  int64 timestamp = 2;

  // The name of the sender who sent this message.
  string sender_handle = 3;

  // The body of the message.
  string message_body = 4;

  // The channel the message was sent in.
  string channel_name = 5;

  // Was this a 1:1 message?
  bool is_one_to_one = 6;
}

message MessageResponse {
  // The id of the message sent from a frontend to the brain. Helps to
  // coordinate the responses to the reuqests.
  int64 unique_id = 1;

  // The message containing the response.
  string message_body = 2;
}
