// Code generated by protoc-gen-go.
// source: squidbot.proto
// DO NOT EDIT!

/*
Package protocols is a generated protocol buffer package.

It is generated from these files:
	squidbot.proto

It has these top-level messages:
	MessageRequest
	MessageResponse
*/
package protocols

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A message coming in from a frontend driver containing the sender's handle
type MessageRequest struct {
	// Used to help coordinate requests to replies.
	UniqueId int64 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	// Timestamp of the message as specified by the upstream service -- not the
	// frontend driver for squidbot.
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// The name of the sender who sent this message.
	SenderHandle string `protobuf:"bytes,3,opt,name=sender_handle,json=senderHandle" json:"sender_handle,omitempty"`
	// The body of the message.
	MessageBody string `protobuf:"bytes,4,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MessageRequest) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *MessageRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MessageRequest) GetSenderHandle() string {
	if m != nil {
		return m.SenderHandle
	}
	return ""
}

func (m *MessageRequest) GetMessageBody() string {
	if m != nil {
		return m.MessageBody
	}
	return ""
}

type MessageResponse struct {
	// The id of the message sent from a frontend to the brain. Helps to
	// coordinate the responses to the reuqests.
	UniqueId int64 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	// The message containing the response.
	MessageBody string `protobuf:"bytes,2,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
}

func (m *MessageResponse) Reset()                    { *m = MessageResponse{} }
func (m *MessageResponse) String() string            { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()               {}
func (*MessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MessageResponse) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *MessageResponse) GetMessageBody() string {
	if m != nil {
		return m.MessageBody
	}
	return ""
}

func init() {
	proto.RegisterType((*MessageRequest)(nil), "protocols.MessageRequest")
	proto.RegisterType((*MessageResponse)(nil), "protocols.MessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Brain service

type BrainClient interface {
	// Posts a message from a frontend
	OnNewMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type brainClient struct {
	cc *grpc.ClientConn
}

func NewBrainClient(cc *grpc.ClientConn) BrainClient {
	return &brainClient{cc}
}

func (c *brainClient) OnNewMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := grpc.Invoke(ctx, "/protocols.Brain/OnNewMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Brain service

type BrainServer interface {
	// Posts a message from a frontend
	OnNewMessage(context.Context, *MessageRequest) (*MessageResponse, error)
}

func RegisterBrainServer(s *grpc.Server, srv BrainServer) {
	s.RegisterService(&_Brain_serviceDesc, srv)
}

func _Brain_OnNewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainServer).OnNewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.Brain/OnNewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainServer).OnNewMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Brain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.Brain",
	HandlerType: (*BrainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNewMessage",
			Handler:    _Brain_OnNewMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "squidbot.proto",
}

func init() { proto.RegisterFile("squidbot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x49, 0x0b, 0x88, 0x1c, 0x69, 0x91, 0x3c, 0x85, 0xc2, 0x00, 0x41, 0x48, 0x4c, 0x1e,
	0x60, 0x61, 0xce, 0x02, 0x0c, 0x40, 0x08, 0x3f, 0x20, 0x72, 0xf0, 0xa9, 0x58, 0x6a, 0xec, 0xd4,
	0xe7, 0x80, 0xf8, 0x1d, 0xfc, 0x61, 0x5c, 0x27, 0x2a, 0x2a, 0x20, 0x26, 0x5b, 0xdf, 0x7b, 0x77,
	0xf7, 0xf4, 0x60, 0x4a, 0xcb, 0x4e, 0xc9, 0xda, 0x38, 0xde, 0x5a, 0xe3, 0x0c, 0x8b, 0xc3, 0xf3,
	0x62, 0x16, 0x94, 0x7d, 0x46, 0x30, 0xbd, 0x47, 0x22, 0x31, 0xc7, 0x12, 0x97, 0x1d, 0x92, 0x63,
	0x47, 0x10, 0x77, 0x5a, 0xf9, 0x7f, 0xa5, 0x64, 0x1a, 0x9d, 0x44, 0x17, 0xe3, 0x72, 0xaf, 0x07,
	0x77, 0x92, 0x1d, 0x43, 0xec, 0x54, 0xe3, 0x6d, 0xa2, 0x69, 0xd3, 0x51, 0x10, 0xbf, 0x01, 0x3b,
	0x83, 0x09, 0xa1, 0x96, 0x68, 0xab, 0x57, 0xa1, 0xe5, 0x02, 0xd3, 0xb1, 0x77, 0xc4, 0x65, 0xd2,
	0xc3, 0xdb, 0xc0, 0xd8, 0x29, 0x24, 0x4d, 0x7f, 0xb1, 0xaa, 0x8d, 0xfc, 0x48, 0xb7, 0x83, 0x67,
	0x7f, 0x60, 0xb9, 0x47, 0xd9, 0x13, 0x1c, 0xac, 0x43, 0x51, 0x6b, 0x34, 0xe1, 0xff, 0xa9, 0x7e,
	0xae, 0x1c, 0xfd, 0x5a, 0x79, 0x59, 0xc0, 0x4e, 0x6e, 0x85, 0xd2, 0xec, 0x06, 0x92, 0x47, 0xfd,
	0x80, 0xef, 0xc3, 0x01, 0x76, 0xc8, 0xd7, 0x6d, 0xf0, 0xcd, 0x26, 0x66, 0xb3, 0xbf, 0xa4, 0x3e,
	0x4f, 0xb6, 0x95, 0x5f, 0xc3, 0xb9, 0xb1, 0x73, 0x2e, 0xe4, 0x1b, 0x6a, 0xd7, 0x59, 0xf4, 0x25,
	0x0b, 0xc9, 0x37, 0xab, 0x5e, 0x8d, 0xe6, 0x93, 0xe7, 0x81, 0x15, 0x2b, 0x54, 0x44, 0xf5, 0x6e,
	0xd0, 0xae, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xae, 0x1d, 0x4e, 0x98, 0x01, 0x00, 0x00,
}
